openapi: 3.0.0
info:
  version: '1.0'
  title: "Projectse2group06 OpenAPI 3.0"
  description: API for managing a school system.
  license:
    name: MIT
servers:
  - url: https://project-se-2-group-06.herokuapp.com/api/
    description: Heroku test server (uses test data)
    
paths:
  /users:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the list of all users in the system
      summary: Returns all the users
      responses:
        '200':
          description: 'Collection of Users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    post:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Creates a new user in the system
      summary: Register a new user
      responses:
        '201':
          description: 'Location of created user'
          headers:
            Location:
              schema:
                type: string
              description: 'Link to the newly created user'     
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              
    patch:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update all the users in the system
      summary: Update all the existing users in the system
      responses:
        '405':
          description: 'Method not allowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
           schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatedUser'
                
    delete:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Delete all the users in the system
      summary: Delete all the users
      responses:
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  /users/{id}:
    delete: 
      security:
        - bearerJwtAuthToken: []
      description: >-
        Delete a user with a specific id
      summary: Delete a user
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the user to delete'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'User to delete not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a users with a specific id
      summary: Return a user
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the user to insert'
      responses:
        '200':
          description: 'Data of user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    patch:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update a user in the system given the user's id
      summary: Update a user
      parameters:
        - in: path
          name: id
          required: true
          description: 'Id of the user to update'
          schema: 
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
           schema:
              $ref: '#/components/schemas/UpdatedUser'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'id not found or invalid'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /yourself:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns your data
      summary: Returns the data of the logged user who accessed the resource
      responses:
        '200':
          description: 'Data of the user who accessed the resource'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Yourself'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'          

  /login:
    post:
      description: Login to the service providing the credentials
      summary: Login into the system
      requestBody:
        content:
          application/json:
           schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Login successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/LoginFailedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /login/refresh:
    post:
      description: Providing a refresh token allows you to get a new access token without log in again
      summary: Obtain a new access token
      requestBody:
        content:
          application/json:
           schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 'Refresh successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          $ref: '#/components/responses/LoginFailedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /classes:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the list of all classes in the system
      summary: Returns all the classes
      responses:
        '200':
          description: 'Collection of Classes'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    post:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Creates a new class in the system
      summary: Create a new class
      responses:
        '201':
          description: 'Location of created class'
          headers:
            Location:
              schema:
                type: string
              description: 'Link to the newly created class'     
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
    
    patch:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update all the classes in the system
      summary: Update all the existing classes in the system
      responses:
        '405':
          description: 'Method not allowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
           schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdatedClass'
                
    delete:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Delete all the classes in the system
      summary: Delete all the classes
      responses:
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
     
  /classes/{id}:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a class with a specific id
      summary: Return a class
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class to insert'
      responses:
        '200':
          description: 'Data of class'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '404':
          description: 'Class not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    patch:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update a class in the system given the id of the class
      summary: Update a class
      parameters:
        - in: path
          name: id
          required: true
          description: 'Id of the class to update'
          schema: 
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
           schema:
              $ref: '#/components/schemas/UpdatedClass'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Class"
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'id not found or invalid'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      
    delete: 
      security:
        - bearerJwtAuthToken: []
      description: >-
        Delete a class given a specific id
      summary: Delete a class
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class to delete'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'Class to delete not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /classes/{id}/grades:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the list of grades of a class with a specific id
      summary: Returns the list of grades of a class with a specific id
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class from which to get the grades'
      responses:
        '200':
          description: 'Grades of the class'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GradeElement'
        '404':
          description: 'Class not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    post: 
      security:
        - bearerJwtAuthToken: []
      description: >-
        Creates a new grades for one student of a class with a specific id
      summary: Insert a new grade for students in a specific class
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class to which insert the grades'
      responses:
        '201':
          description: 'Location of created element in grades list of a specific class'
          headers:
            Location:
              schema:
                type: string
              description: 'Link to the newly created grades item in ClassGrades'     
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeElement' 
              
    patch:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update all the grades of the students of a specific class
      summary: Update all the grades given a certain class
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class associated with the grades'
      responses:
        '405':
          description: 'Method not allowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
           schema:
              type: array
              items:
                $ref: '#/components/schemas/GradeElement'
    
    delete:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Delete all the grades of the students in a specific class
      summary: Delete all the grades given a certain class
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the class associated with the grades to delete'
      responses:
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
                
  /classes/{classId}/grades/{gradeId}:
    patch: 
      security:
        - bearerJwtAuthToken: []
      description: >-
        Update a grade of a student given his or her id and the class identifier he or she belongs to
      summary: Update a class
      parameters:
        - in: path
          name: classId
          required: true
          description: 'Id of the class to update'
          schema: 
            type: string
            format: ObjectId
        - in: path
          name: gradeId
          required: true
          description: 'Id of the grade to update'
          schema: 
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
           schema:
              $ref: '#/components/schemas/UpdatedGradeElement'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GradeElement"
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'Grade or class not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a grade with a specific id
      summary: Return a grade
      parameters: 
        - in: path
          name: classId
          required: true
          description: 'Id of the class where there is the grade to retrieve'
          schema: 
            type: string
            format: ObjectId
        - in: path
          name: gradeId
          required: true
          description: 'Id of the grade to retrieve'
          schema: 
            type: string
            format: ObjectId
      responses:
        '200':
          description: 'Data of single grade'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeElement'
        '404':
          description: 'Grade or class not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    delete: 
      security:
        - bearerJwtAuthToken: []
      description: >-
         Delete a grade of the student in a specific class
      summary: Delete a grade of given student in a certain class
      parameters: 
        - in: path
          name: classId
          required: true
          description: 'Id of the class where there is the grade to delete'
          schema: 
            type: string
            format: ObjectId
        - in: path
          name: gradeId
          required: true
          description: 'Id of the grade to delete'
          schema: 
            type: string
            format: ObjectId
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          description: 'Grade or class not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  /communications:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the list of all the communications sended by secretaries in the system
      summary: Returns all the communications made by secretaries in the system
      responses:
        '200':
          description: 'Collection of Communications'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Communication'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /communications/{id}:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a communication with a specific id
      summary: Returns a communication
      parameters: 
        - in: path
          name: id
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the communication to insert'
      responses:
        '200':
          description: 'Data of the communication'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Communication'
        '404':
          description: 'Communication not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /users/{userId}/communications:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a communication of a specific user given his or her id
      summary: Returns all the communications
      parameters: 
        - in: path
          name: userId
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the user that want to get the communications received'
      responses:
        '200':
          description: 'Data of the communication'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Communication'
        '404':
          description: 'Communication not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Creates a new communication for the selected user
      summary: Insert a new Communication for the selected user
      parameters: 
        - in: path
          name: userId
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the user that will recieve the communication'
      responses:
        '201':
          description: 'Location of created communication'
          headers:
            Location:
              schema:
                type: string
              description: 'Link to the newly created communication'     
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunication'    


  /users/{userId}/communications/{communicationsId}:
    get:
      security:
        - bearerJwtAuthToken: []
      description: >-
        Returns the data of a communication given its and the owner's id
      summary: Returns a communication
      parameters: 
        - in: path
          name: userId
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the user that want to get the communications'
        - in: path
          name: communicationsId
          schema: 
            type: string
            format: ObjectId
          required: true
          description: 'Id of the communications to get'
      responses:
        '200':
          description: 'Data of the communication'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Communication'
        '404':
          description: 'User or communication not found'
        '403':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerJwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    UpdatedUser:
      type: object
      properties:
        name:
          type: string
          description: 'name of the user'
        surname:
          type: string
          description: 'surname of the user'
        email:
          type: string
          description: 'email of the user'
          format: email
        password:
          type: string
          description: 'password of the user'
        id:
          type: string
          format: ObjectId
          description: 'ID of the user'
        role:
          type: integer
          description: 'role of the user'
        birth_date:
          type: string
          description: 'birth date of the user'
          format: date
        class_id:
          type: string
          format: ObjectId
          description: 'ID of the class where a student belong'
        teaches:
          type: array
          description: 'list of the subjects teached in classes'
          items: 
            $ref: '#/components/schemas/Teach'
        communications:
          type: array
          description: 'list of communicatoins associated with the user'
          items:
            $ref: '#/components/schemas/Communication'
            
    User:
      allOf:
        - $ref: '#/components/schemas/UpdatedUser'
        - type: object
      type: object
      required:
        - name
        - surname
        - email
        - password
        - id
        - role
        - birth_date

    Secretary:
      properties:
        email:
          type: string
          description: 'email of the user'
          format: email
        id:
          type: string
          format: ObjectId
          description: 'ID of the user'
        role:
          type: integer
          description: 'role of the user'
      required:
        - email
        - id
        - role
        
    Student:
      allOf:
        - $ref: '#/components/schemas/Secretary'
        - type: object 
      properties:
        class_id: 
          type: string
          format: ObjectId
          description: 'ID of the class where a student belong'
      
    Teacher:
      allOf:
        - $ref: '#/components/schemas/Secretary'
        - type: object 
      properties:
        teaches:
          type: array
          description: 'list of the subjects teached in classes'
          items: 
            $ref: '#/components/schemas/Teach'
        
    Yourself:
      oneOf:
        - $ref: '#/components/schemas/Teacher'
        - $ref: '#/components/schemas/Student'
        - $ref: '#/components/schemas/Secretary'
      type: object

    Lecture:
      type: object
      properties:
        start_hour:
          type: integer
          description: 'when the lecture starts (hour)'
        start_minute:
          type: integer
          description: 'when the lecture starts (minutes)'
        end_hour:
          type: integer
          description: 'when the lecture ends (hour)'
        end_minute:
          type: integer
          description: 'when the lecture ends (minutes)'
        subject:
          type: string
          description: 'the subject of the lecture'
        professor_id:
          type: string
          format: ObjectId
          description: 'the professor of the lecture'
      required:
        - start_hour
        - start_minute
        - end_hour
        - end_minute
        - subject
        - professor_id
        
    Message:
      type: object
      properties:
        subject:
          type: string
          description: 'the subject of the message'
        content:
          type: string
          description: 'the content of the message'
      required:
        - subject
        - content
    Homework:
      type: object
      properties:
        subject:
          type: integer
          description: 'the subject of the homework'
        title:
          type: string
          description: 'the title of the homework'
        description:
          type: string
          description: 'the decription of the homework'
        date:
          type: string
          format: date
          description: 'when the homework is scheduled'
      required:
        - title
        - description
        - date
        - subject
        
    Test:
      type: object
      properties:
        subject:
          type: integer
          description: 'the subject of the test'
        title:
          type: string
          description: 'the title of the test'
        description:
          type: string
          description: 'the decription of the test'
        date:
          type: string
          format: date
          description: 'when the test is scheduled'
      required:
        - title
        - description
        - date
        - subject
        
    Material:
      type: object
      properties:
        subject:
          type: integer
          description: 'the subject of the material'
        description:
          type: string
          description: 'the description of the material'
      required:
        - description
        - subject
        
    GradeElement:
      allOf:
        - $ref: '#/components/schemas/UpdatedGradeElement'
        - type: object
      type: object
      required:
        - subject
        - student_id
        - value
        - date
        - description
        
    UpdatedGradeElement:
      type: object
      properties:
        subject: 
          type: integer
          description: 'the subject of the grade'
        student_id:
          type: string
          format: ObjectId
          description: 'the id of the student'
        value:
          type: number
          format: float
          description: 'the value of the grade'
        date:
          type: string
          format: date
          description: 'when the grade is assigned'
        description:
          type: string
        
    UpdatedClass:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          description: 'ID of the class'
        name: 
          type: string
          description: 'name of the class'
        schedule:
          type: array
          description: 'schedule of the class'
          items:
            $ref: '#/components/schemas/Lecture'
        communications:
          type: object
          properties:
            sender_id: 
              type: string
              format: ObjectId
              description: 'the id of the sender of the communication'
            messages:
              type: array
              description: 'the messages sent by the sender'
              items: 
                $ref: '#/components/schemas/Message'
          required:
            - sender_id
        homeworks:
          type: array
          description: 'homeworks assigned to the class'
          items:
            $ref: '#/components/schemas/Homework'
        tests:
          type: array
          description: 'tests scheduled for the class'
          items: 
            $ref: '#/components/schemas/Test'
        materials:
          type: array
          description: 'materials for the class'
          items:
            $ref: '#/components/schemas/Material'
        grades_list:
          type: array
          description: 'grades of the class'
          items:
            $ref: '#/components/schemas/GradeElement'
            
    Class:
      allOf:
        - $ref: '#/components/schemas/UpdatedClass'
        - type: object
      type: object
      required:
        - id
        - name
        
    Teach:
      type: object
      properties:
        subject: 
          type: integer
          description: 'subject of the professor'
        class_id: 
          type: string
          format: ObjectId
          description: 'ID of the class for the professor'
          
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          description: "User's email"
        password:
          type: string
          description: "User's password"
          
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          description: 'Login successful'
        accessToken:
          type: string
          description: 'Access token'
        refreshToken:
          type: string
          description: 'Access token'
    
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: 'Refresh token'
          
    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: 'New access token'
          
    Communication:
      allOf:
        - $ref: '#/components/schemas/CreateCommunication'
        - type: object
      type: object
      properties:
        sender: 
          type: string
          format: ObjectId
          description: 'the id of the sender of the communication'
        sender_role:
          type: integer
          description: 'role of the sender of the communication'
      required:
        - sender
        - sender_role
          
    CreateCommunication:
      type: object
      properties:
        subject:
          type: string
          description: 'the subject of the message'
        content:
          type: string
          description: 'the content of the message'
        date:
          type: string
          description: 'creation date of the message'
      required:
        - subject
        - content
        - date
  
  responses:
    LoginFailedError:
      description: 'Login failed'
      
    UnauthorizedError:
      description: 'Forbidden'
      
    InternalServerError:
      description: 'Internal server error'
      
    UnprocessableEntity:
      description: 'Unprocessable entity'
      
    MethodNotAllowed:
      description: 'Method not allowed'
      
    NoContentResponse:
      description: 'No content'