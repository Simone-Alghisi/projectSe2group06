openapi: 3.0.0
info:
  version: '1.0'
  title: "Projectse2group06 OpenAPI 3.0"
  description: API for managing a school system.
  license:
    name: MIT
servers:
  - url: https://project-se-2-group-06.herokuapp.com/v1
    description: Heroku test server (uses test data)
paths:
  /users:
    get:
      description: >-
        Returns the list of all users in the system
      summary: Returns all the users
      responses:
        '200':
          description: 'Collection of Users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      description: >-
        Creates a new user in the system
      summary: Register a new user
      responses:
        '201':
          description: 'Collection of Users'
          headers:
            Location:
              schema:
                type: string
              description: Link to the newly created user.      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      description: >-
        Delete all the user in the system
      summary: Delete all the users
      responses:
        '405':
          description: 'Method not allowed'

  /users/{id}:
    delete: 
      description: >-
        Delete a user with a specific id
      summary: Delete a user
      parameters: 
        - in: path
          name: id
          schema: 
            type: integer
          required: true
          description: 'Id of the user to delete'
      responses:
        '204':
          description: 'User deleted'
        '404':
          description: 'User to delete not found'
    get:
      description: >-
        Returns the data of a users with a specific id
      summary: Return a user
      parameters: 
        - in: path
          name: id
          schema: 
            type: integer
          required: true
          description: 'Id of the user to insert'
      responses:
        '200':
          description: 'Data of user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
          
components:
  schemas:
    User:
      type: object
      required:
        - name
        - surname
        - email
        - password
        - id
        - role
        - birth_date
      properties:
        name:
          type: string
          description: 'name of the user'
        surname:
          type: string
          description: 'surname of the user'
        email:
          type: string
          description: 'email of the user'
          format: email
        password:
          type: string
          description: 'password of the user'
        id:
          type: integer
          description: 'ID of the user'
        role:
          type: integer
          description: 'role of the user'
        birth_date:
          type: string
          description: 'birth date of the user'
          format: date